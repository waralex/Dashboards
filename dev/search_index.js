var documenterSearchIndex = {"docs":
[{"location":"api/#Dashboards.jl-API","page":"API Docs","title":"Dashboards.jl API","text":"","category":"section"},{"location":"api/","page":"API Docs","title":"API Docs","text":"","category":"page"},{"location":"api/","page":"API Docs","title":"API Docs","text":"Dash\n@callid_str\ncallback!\nmake_handler","category":"page"},{"location":"api/#Dashboards.Dash","page":"API Docs","title":"Dashboards.Dash","text":"struct Dash <: Any\n\nRepresentation of Dash application\n\n\n\n\n\n","category":"type"},{"location":"api/#Dashboards.@callid_str","page":"API Docs","title":"Dashboards.@callid_str","text":"@callid_str\"\n\nMacro for crating Dash CallbackId. Parse string in form \"[{State1[, ...]}] Input1[, ...] => Output1[, ...]\"\n\n#Examples\n\n    id1 = callid\"{inputDiv.children} input.value => output1.value, output2.value\"\n\n\n\n\n\n","category":"macro"},{"location":"api/#Dashboards.callback!","page":"API Docs","title":"Dashboards.callback!","text":"callback!(func::Function, app::Dash, id::CallbackId; pass_changed_props = false)\n\nCreate a callback that updates the output by calling function func.\n\nIf pass_changed_props is true then the first argument of callback is an array of changed properties\n\nExamples\n\napp = Dash(\"Test\") do\n    html_div() do\n        dcc_input(id=\"graphTitle\", value=\"Let's Dance!\", type = \"text\"),\n        dcc_input(id=\"graphTitle2\", value=\"Let's Dance!\", type = \"text\"),\n        html_div(id=\"outputID\"),\n        html_div(id=\"outputID2\")\n\n    end\nend\ncallback!(app, CallbackId(\n    state = [(:graphTitle, :type)],\n    input = [(:graphTitle, :value)],\n    output = [(:outputID, :children), (:outputID2, :children)]\n    )\n    ) do stateType, inputValue\n    return (stateType * \"...\" * inputValue, inputValue)\nend\n\nYou can use macro callid string macro for make CallbackId : \n\ncallback!(app, callid\"{graphTitle.type} graphTitle.value => outputID.children, outputID2.children\") do stateType, inputValue\n\n    return (stateType * \"...\" * inputValue, inputValue)\nend\n\nUsing changed_props\n\ncallback!(app, callid\"graphTitle.value, graphTitle2.value => outputID.children\", pass_changed_props = true) do changed, input1, input2\n    if \"graphTitle.value\" in changed\n        return input1\n    else\n        return input2\n    end\nend\n\n\n\n\n\n","category":"function"},{"location":"api/#Dashboards.make_handler","page":"API Docs","title":"Dashboards.make_handler","text":"make_handler(app::Dash; debug = false)\n\nMake handler for routing Dash application in HTTP package \n\n#Arguments\n\napp::Dash - Dash application\ndebug::Bool = false - Enable/disable all the dev tools\n\n#Examples\n\njulia> app = Dash(\"Test\") do\n    html_div() do\n        html_h1(\"Test Dashboard\")\n    end\nend\njulia> handler = make_handler(app)\njulia> HTTP.serve(handler, HTTP.Sockets.localhost, 8080)\n\n\n\n\n\n","category":"function"},{"location":"#Dashboards","page":"Dashboards","title":"Dashboards","text":"","category":"section"},{"location":"","page":"Dashboards","title":"Dashboards","text":"Julia backend for Plotly Dash","category":"page"},{"location":"#Version-0.2.8-released","page":"Dashboards","title":"Version 0.2.8 released","text":"","category":"section"},{"location":"","page":"Dashboards","title":"Dashboards","text":"Integration with travis ci\ndash-bootstrap-components added with prefix dbc. Examples of use will be soon\npasschangedprops argument added to callback! function. For details see docs of callback!","category":"page"},{"location":"#Version-0.2.5-released","page":"Dashboards","title":"Version 0.2.5 released","text":"","category":"section"},{"location":"","page":"Dashboards","title":"Dashboards","text":"Now you can use PlotlyBase.Plot to work with the figure property of the dcc_graph component. Examples are: Plot usage in layout, Plot usage in callback\nAdded PreventUpdate exception and no_update() function to prevent updates in callback. See PreventUpdate example and no_update() example\nMost of dashboards from Dash Tutorial are implemented using Dashboards.jl. See DashboardsExamples repo","category":"page"},{"location":"#Installation","page":"Dashboards","title":"Installation","text":"","category":"section"},{"location":"","page":"Dashboards","title":"Dashboards","text":"Julia version >= 1.2 is required. It also works in 1.1 now, but I do not plan testing and support for versions under 1.2","category":"page"},{"location":"","page":"Dashboards","title":"Dashboards","text":"import Pkg; Pkg.add(\"Dashboards\")","category":"page"},{"location":"#Usage","page":"Dashboards","title":"Usage","text":"","category":"section"},{"location":"#Basic-application","page":"Dashboards","title":"Basic application","text":"","category":"section"},{"location":"","page":"Dashboards","title":"Dashboards","text":"julia> import HTTP\njulia> using Dashboards\njulia> app = Dash(\"Test app\", external_stylesheets = [\"https://codepen.io/chriddyp/pen/bWLwgP.css\"]) do\n    html_div() do\n        html_h1(\"Hello Dashboards\"),\n        html_div(\"Dashboards: Julia interface for Dash\"),\n        dcc_graph(\n            id = \"example-graph\",\n            figure = (\n                data = [\n                    (x = [1, 2, 3], y = [4, 1, 2], type = \"bar\", name = \"SF\"),\n                    (x = [1, 2, 3], y = [2, 4, 5], type = \"bar\", name = \"MontrÃ©al\"),\n                ],\n                layout = (title = \"Dash Data Visualization\",)\n            )\n        )\n    end\nend\njulia> handler = make_handler(app, debug = true)\njulia> HTTP.serve(handler, HTTP.Sockets.localhost, 8080)","category":"page"},{"location":"","page":"Dashboards","title":"Dashboards","text":"The Dash struct represent dashboard application.\nThe constructor for Dash struct is Dash(layout_maker::Function, name::String;  external_stylesheets::Vector{String} = Vector{String}(), url_base_pathname=\"/\", assets_folder::String = \"assets\") where layout_maker is a function with signature ()::Component\nUnlike the python version where each Dash component is represented as a separate class, all components in Dashboard are represented by struct Component.\nYou can create Component specific for concrete Dash component by the set of functions in the form lowercase(<component package>)_lowercase(<component name>). For example, in python html <div> element is represented as HTML.Div in Dasboards it is created using function html_div\nThe list of all supported components is available in docstring for Dasboards module\nAll functions for a component creation have the signature (;kwargs...)::Component. List of key arguments specific for the concrete component is available in the docstring for each function\nFunctions for creation components which have children property have two additional methods (children::Any; kwargs...)::Component and (children_maker::Function; kwargs..)::Component. children must by string or number or single component or collection of components\nmake_handler(app::Dash; debug::Bool = false) makes handler function for using in HTTP package","category":"page"},{"location":"","page":"Dashboards","title":"Dashboards","text":"Once you have run the code to create the Dashboard, go to http://127.0.0.1:8080 in your browser to view the Dashboard!","category":"page"},{"location":"#Basic-Callback","page":"Dashboards","title":"Basic Callback","text":"","category":"section"},{"location":"","page":"Dashboards","title":"Dashboards","text":"julia> import HTTP\njulia> using Dashboards\njulia> app = Dash(\"Test app\", external_stylesheets = [\"https://codepen.io/chriddyp/pen/bWLwgP.css\"]) do\n    html_div() do\n        dcc_input(id = \"my-id\", value=\"initial value\", type = \"text\"),\n        html_div(id = \"my-div\")        \n    end\nend\njulia> callback!(app, callid\"my-id.value => my-div.children\") do input_value\n    \"You've entered $(input_value)\"\nend\njulia> handler = make_handler(app, debug = true)\njulia> HTTP.serve(handler, HTTP.Sockets.localhost, 8080)","category":"page"},{"location":"","page":"Dashboards","title":"Dashboards","text":"You can make your dashboard interactive by register callbacks for changes in frontend with function callback!(func::Function, app::Dash, id::CallbackId)\nInputs and outputs (and states, see below) of callback are described by struct CallbackId which can easily created by string macro callid\"\"\ncallid\"\" parse string in form \"[{state1 [,...]}] input1[,...] => output1[,...]\" where all items is \"<element id>.<property name>\"\nCallback function must have the signature(states..., inputs...) and return data for output","category":"page"},{"location":"#States-and-Multiple-Outputs","page":"Dashboards","title":"States and Multiple Outputs","text":"","category":"section"},{"location":"","page":"Dashboards","title":"Dashboards","text":"julia> import HTTP\njulia> using Dashboards\njulia> app = Dash(\"Test app\", external_stylesheets = [\"https://codepen.io/chriddyp/pen/bWLwgP.css\"]) do\n    html_div() do\n        dcc_input(id = \"my-id\", value=\"initial value\", type = \"text\"),\n        html_div(id = \"my-div\"),\n        html_div(id = \"my-div2\")        \n    end\nend\njulia> callback!(app, callid\"{my-id.type} my-id.value => my-div.children, my-div2.children\") do state_value, input_value\n    \"You've entered $(input_value) in input with type $(state_value)\",\n    \"You've entered $(input_value)\"\nend\njulia> handler = make_handler(app, debug = true)\njulia> HTTP.serve(handler, HTTP.Sockets.localhost, 8080)","category":"page"},{"location":"","page":"Dashboards","title":"Dashboards","text":"For multiple output callback must return any collection with element for each output","category":"page"},{"location":"#Comparation-with-original-python-syntax","page":"Dashboards","title":"Comparation with original python syntax","text":"","category":"section"},{"location":"#component-naming:","page":"Dashboards","title":"component naming:","text":"","category":"section"},{"location":"","page":"Dashboards","title":"Dashboards","text":"html.Div => html_div, dcc.Graph => dcc_graph and etc","category":"page"},{"location":"#component-creation:","page":"Dashboards","title":"component creation:","text":"","category":"section"},{"location":"","page":"Dashboards","title":"Dashboards","text":"Just like in Python, functions for creating components have keywords arguments, which are the same as in Python. html_div(id=\"my-id\", children=\"Simple text\"). For components that have children prop, two additional signatures are available. (children; kwargs..) and (children_maker::Function; kwargs...) so You can write html_div(\"Simple text\", id=\"my-id\")  for simple elements or avoid the hell of nested brackets with do syntax for complex elements:","category":"page"},{"location":"","page":"Dashboards","title":"Dashboards","text":"html_div(id=\"outer-div\") do\n    html_h1(\"Welcome\"),\n    html_div(id=\"inner-div\") do\n    ......\n    end\nend","category":"page"},{"location":"#application-and-layout:","page":"Dashboards","title":"application and layout:","text":"","category":"section"},{"location":"","page":"Dashboards","title":"Dashboards","text":"python:","category":"page"},{"location":"","page":"Dashboards","title":"Dashboards","text":"app = dash.Dash(\"Test\", external_stylesheets=external_stylesheets)\napp.layout = html.Div(children=[....])","category":"page"},{"location":"","page":"Dashboards","title":"Dashboards","text":"Dashboards:","category":"page"},{"location":"","page":"Dashboards","title":"Dashboards","text":"app = Dash(\"Test\", external_stylesheets=external_stylesheets) do\n   html_div() do\n    ......\n   end\nend","category":"page"},{"location":"#callbacks:","page":"Dashboards","title":"callbacks:","text":"","category":"section"},{"location":"","page":"Dashboards","title":"Dashboards","text":"python:","category":"page"},{"location":"","page":"Dashboards","title":"Dashboards","text":"@app.callback(Output('output', 'children'),\n              [Input('submit-button', 'n_clicks')],\n              [State('state-1', 'value'),\n               State('state-2', 'value')])\ndef update_output(n_clicks, state1, state2):\n.....\n","category":"page"},{"location":"","page":"Dashboards","title":"Dashboards","text":"Dashboards:","category":"page"},{"location":"","page":"Dashboards","title":"Dashboards","text":"callback!(app, callid\"\"\"{state1.value, state2.value}\n                                   submit-button.n_clicks\n                                   => output.children\"\"\" ) do state1, state2, n_clicks\n.....\nend","category":"page"},{"location":"","page":"Dashboards","title":"Dashboards","text":"Be careful - in Dashboards states came first in arguments list","category":"page"},{"location":"#json:","page":"Dashboards","title":"json:","text":"","category":"section"},{"location":"","page":"Dashboards","title":"Dashboards","text":"I use JSON2 for json serialization/deserialization, so in callbacks all json objects are NamedTuples not Dicts. In component props you can use both Dicts and NamedTuples for json objects. But be careful with single property objects: layout = (title = \"Test graph\") is not interpreted as NamedTuple by Julia  - you need add comma at the end layout = (title = \"Test graph\",)","category":"page"}]
}
